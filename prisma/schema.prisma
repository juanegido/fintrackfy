// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  image         String?
  password      String?
  emailVerified DateTime? @map("email_verified")
  companyName   String?   @map("company_name")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  bankAccounts BankAccount[]
  projects     Project[]
  sessions     Session[]
  accounts     Account[]
  
  @@map("users")
}

model BankAccount {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  plaidAccountId    String   @unique @map("plaid_account_id")
  plaidItemId       String   @map("plaid_item_id")
  plaidAccessToken  String   @map("plaid_access_token")
  name              String
  type              String
  subtype           String?
  mask              String?
  balance           Float?
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id                  String    @id @default(cuid())
  accountId           String    @map("account_id")
  plaidTransactionId  String?   @unique @map("plaid_transaction_id")
  amount              Float
  date                DateTime
  name                String
  merchantName        String?   @map("merchant_name")
  category            String?
  subcategory         String?
  projectId           String?   @map("project_id")
  aiCategorized       Boolean   @default(false) @map("ai_categorized")
  isApproved          Boolean   @default(false) @map("is_approved")
  notes               String?
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Relations
  account BankAccount  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id])

  @@map("transactions")
}

model Project {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  name        String
  description String?
  budget      Float?
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  status      String    @default("active") // active, completed, on_hold
  address     String?
  clientName  String?   @map("client_name")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("projects")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  type        String   // expense, income
  keywords    String[] // Array of keywords for AI categorization
  color       String?
  icon        String?
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("categories")
}

model Vendor {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  keywords    String[] // Array of keywords/patterns to match
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("vendors")
}

 // NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}